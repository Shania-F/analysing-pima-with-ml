{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.5"
    },
    "colab": {
      "name": "pima_decisiontree.ipynb",
      "provenance": [],
      "collapsed_sections": []
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np \n",
        "# for visualisation\n",
        "import matplotlib.pyplot as plt \n",
        "from matplotlib.colors import ListedColormap \n",
        "from mlxtend.plotting import plot_confusion_matrix\n",
        "import seaborn as sns\n",
        "# for ml\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.tree import DecisionTreeClassifier  \n",
        "from sklearn import metrics\n",
        "from sklearn.metrics import confusion_matrix "
      ],
      "metadata": {
        "id": "Bgx4Cw5SrwAz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Describing the data"
      ],
      "metadata": {
        "id": "FZ9-QUo5r2dK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# using pima dataset from kaggle\n",
        "dataset= pd.read_csv('pima.csv')  "
      ],
      "metadata": {
        "id": "P7SdSeA5sFlH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# attributes of dataset\n",
        "print(\"Describing pima dataset:\")\n",
        "dataset.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 317
        },
        "id": "r2HfeEDssV2A",
        "outputId": "054680c2-0458-4917-a1ff-e9b4db941731"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Describing pima dataset:\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Pregnancies     Glucose  BloodPressure  SkinThickness     Insulin  \\\n",
              "count   768.000000  768.000000     768.000000     768.000000  768.000000   \n",
              "mean      3.845052  120.894531      69.105469      20.536458   79.799479   \n",
              "std       3.369578   31.972618      19.355807      15.952218  115.244002   \n",
              "min       0.000000    0.000000       0.000000       0.000000    0.000000   \n",
              "25%       1.000000   99.000000      62.000000       0.000000    0.000000   \n",
              "50%       3.000000  117.000000      72.000000      23.000000   30.500000   \n",
              "75%       6.000000  140.250000      80.000000      32.000000  127.250000   \n",
              "max      17.000000  199.000000     122.000000      99.000000  846.000000   \n",
              "\n",
              "              BMI  DiabetesPedigreeFunction         Age     Outcome  \n",
              "count  768.000000                768.000000  768.000000  768.000000  \n",
              "mean    31.992578                  0.471876   33.240885    0.348958  \n",
              "std      7.884160                  0.331329   11.760232    0.476951  \n",
              "min      0.000000                  0.078000   21.000000    0.000000  \n",
              "25%     27.300000                  0.243750   24.000000    0.000000  \n",
              "50%     32.000000                  0.372500   29.000000    0.000000  \n",
              "75%     36.600000                  0.626250   41.000000    1.000000  \n",
              "max     67.100000                  2.420000   81.000000    1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-75561093-66f9-4447-bc89-601caa410e58\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pregnancies</th>\n",
              "      <th>Glucose</th>\n",
              "      <th>BloodPressure</th>\n",
              "      <th>SkinThickness</th>\n",
              "      <th>Insulin</th>\n",
              "      <th>BMI</th>\n",
              "      <th>DiabetesPedigreeFunction</th>\n",
              "      <th>Age</th>\n",
              "      <th>Outcome</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>768.000000</td>\n",
              "      <td>768.000000</td>\n",
              "      <td>768.000000</td>\n",
              "      <td>768.000000</td>\n",
              "      <td>768.000000</td>\n",
              "      <td>768.000000</td>\n",
              "      <td>768.000000</td>\n",
              "      <td>768.000000</td>\n",
              "      <td>768.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>3.845052</td>\n",
              "      <td>120.894531</td>\n",
              "      <td>69.105469</td>\n",
              "      <td>20.536458</td>\n",
              "      <td>79.799479</td>\n",
              "      <td>31.992578</td>\n",
              "      <td>0.471876</td>\n",
              "      <td>33.240885</td>\n",
              "      <td>0.348958</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>3.369578</td>\n",
              "      <td>31.972618</td>\n",
              "      <td>19.355807</td>\n",
              "      <td>15.952218</td>\n",
              "      <td>115.244002</td>\n",
              "      <td>7.884160</td>\n",
              "      <td>0.331329</td>\n",
              "      <td>11.760232</td>\n",
              "      <td>0.476951</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.078000</td>\n",
              "      <td>21.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>99.000000</td>\n",
              "      <td>62.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>27.300000</td>\n",
              "      <td>0.243750</td>\n",
              "      <td>24.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>3.000000</td>\n",
              "      <td>117.000000</td>\n",
              "      <td>72.000000</td>\n",
              "      <td>23.000000</td>\n",
              "      <td>30.500000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>0.372500</td>\n",
              "      <td>29.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>6.000000</td>\n",
              "      <td>140.250000</td>\n",
              "      <td>80.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>127.250000</td>\n",
              "      <td>36.600000</td>\n",
              "      <td>0.626250</td>\n",
              "      <td>41.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>17.000000</td>\n",
              "      <td>199.000000</td>\n",
              "      <td>122.000000</td>\n",
              "      <td>99.000000</td>\n",
              "      <td>846.000000</td>\n",
              "      <td>67.100000</td>\n",
              "      <td>2.420000</td>\n",
              "      <td>81.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-75561093-66f9-4447-bc89-601caa410e58')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-75561093-66f9-4447-bc89-601caa410e58 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-75561093-66f9-4447-bc89-601caa410e58');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Correlations in pima dataset:\")\n",
        "dataset.corr()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 349
        },
        "id": "4zLkudb8sbSl",
        "outputId": "f067d4c5-0d34-4fae-e4e5-4c097dc61113"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Correlations in pima dataset:\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                          Pregnancies   Glucose  BloodPressure  SkinThickness  \\\n",
              "Pregnancies                  1.000000  0.129459       0.141282      -0.081672   \n",
              "Glucose                      0.129459  1.000000       0.152590       0.057328   \n",
              "BloodPressure                0.141282  0.152590       1.000000       0.207371   \n",
              "SkinThickness               -0.081672  0.057328       0.207371       1.000000   \n",
              "Insulin                     -0.073535  0.331357       0.088933       0.436783   \n",
              "BMI                          0.017683  0.221071       0.281805       0.392573   \n",
              "DiabetesPedigreeFunction    -0.033523  0.137337       0.041265       0.183928   \n",
              "Age                          0.544341  0.263514       0.239528      -0.113970   \n",
              "Outcome                      0.221898  0.466581       0.065068       0.074752   \n",
              "\n",
              "                           Insulin       BMI  DiabetesPedigreeFunction  \\\n",
              "Pregnancies              -0.073535  0.017683                 -0.033523   \n",
              "Glucose                   0.331357  0.221071                  0.137337   \n",
              "BloodPressure             0.088933  0.281805                  0.041265   \n",
              "SkinThickness             0.436783  0.392573                  0.183928   \n",
              "Insulin                   1.000000  0.197859                  0.185071   \n",
              "BMI                       0.197859  1.000000                  0.140647   \n",
              "DiabetesPedigreeFunction  0.185071  0.140647                  1.000000   \n",
              "Age                      -0.042163  0.036242                  0.033561   \n",
              "Outcome                   0.130548  0.292695                  0.173844   \n",
              "\n",
              "                               Age   Outcome  \n",
              "Pregnancies               0.544341  0.221898  \n",
              "Glucose                   0.263514  0.466581  \n",
              "BloodPressure             0.239528  0.065068  \n",
              "SkinThickness            -0.113970  0.074752  \n",
              "Insulin                  -0.042163  0.130548  \n",
              "BMI                       0.036242  0.292695  \n",
              "DiabetesPedigreeFunction  0.033561  0.173844  \n",
              "Age                       1.000000  0.238356  \n",
              "Outcome                   0.238356  1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e7eaa7c0-59ac-47b6-b46d-98b9f1985ca0\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pregnancies</th>\n",
              "      <th>Glucose</th>\n",
              "      <th>BloodPressure</th>\n",
              "      <th>SkinThickness</th>\n",
              "      <th>Insulin</th>\n",
              "      <th>BMI</th>\n",
              "      <th>DiabetesPedigreeFunction</th>\n",
              "      <th>Age</th>\n",
              "      <th>Outcome</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Pregnancies</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.129459</td>\n",
              "      <td>0.141282</td>\n",
              "      <td>-0.081672</td>\n",
              "      <td>-0.073535</td>\n",
              "      <td>0.017683</td>\n",
              "      <td>-0.033523</td>\n",
              "      <td>0.544341</td>\n",
              "      <td>0.221898</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Glucose</th>\n",
              "      <td>0.129459</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.152590</td>\n",
              "      <td>0.057328</td>\n",
              "      <td>0.331357</td>\n",
              "      <td>0.221071</td>\n",
              "      <td>0.137337</td>\n",
              "      <td>0.263514</td>\n",
              "      <td>0.466581</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>BloodPressure</th>\n",
              "      <td>0.141282</td>\n",
              "      <td>0.152590</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.207371</td>\n",
              "      <td>0.088933</td>\n",
              "      <td>0.281805</td>\n",
              "      <td>0.041265</td>\n",
              "      <td>0.239528</td>\n",
              "      <td>0.065068</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SkinThickness</th>\n",
              "      <td>-0.081672</td>\n",
              "      <td>0.057328</td>\n",
              "      <td>0.207371</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.436783</td>\n",
              "      <td>0.392573</td>\n",
              "      <td>0.183928</td>\n",
              "      <td>-0.113970</td>\n",
              "      <td>0.074752</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Insulin</th>\n",
              "      <td>-0.073535</td>\n",
              "      <td>0.331357</td>\n",
              "      <td>0.088933</td>\n",
              "      <td>0.436783</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.197859</td>\n",
              "      <td>0.185071</td>\n",
              "      <td>-0.042163</td>\n",
              "      <td>0.130548</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>BMI</th>\n",
              "      <td>0.017683</td>\n",
              "      <td>0.221071</td>\n",
              "      <td>0.281805</td>\n",
              "      <td>0.392573</td>\n",
              "      <td>0.197859</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.140647</td>\n",
              "      <td>0.036242</td>\n",
              "      <td>0.292695</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>DiabetesPedigreeFunction</th>\n",
              "      <td>-0.033523</td>\n",
              "      <td>0.137337</td>\n",
              "      <td>0.041265</td>\n",
              "      <td>0.183928</td>\n",
              "      <td>0.185071</td>\n",
              "      <td>0.140647</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.033561</td>\n",
              "      <td>0.173844</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>0.544341</td>\n",
              "      <td>0.263514</td>\n",
              "      <td>0.239528</td>\n",
              "      <td>-0.113970</td>\n",
              "      <td>-0.042163</td>\n",
              "      <td>0.036242</td>\n",
              "      <td>0.033561</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.238356</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Outcome</th>\n",
              "      <td>0.221898</td>\n",
              "      <td>0.466581</td>\n",
              "      <td>0.065068</td>\n",
              "      <td>0.074752</td>\n",
              "      <td>0.130548</td>\n",
              "      <td>0.292695</td>\n",
              "      <td>0.173844</td>\n",
              "      <td>0.238356</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e7eaa7c0-59ac-47b6-b46d-98b9f1985ca0')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e7eaa7c0-59ac-47b6-b46d-98b9f1985ca0 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e7eaa7c0-59ac-47b6-b46d-98b9f1985ca0');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.hist(figsize=(10,10))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 781
        },
        "id": "OwA1ibOosnNP",
        "outputId": "a3e070e0-ee31-4db4-b78a-4162f8c15d18"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7fcf5171e4d0>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7fcf51be56d0>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7fcf51685f10>],\n",
              "       [<matplotlib.axes._subplots.AxesSubplot object at 0x7fcf51647550>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7fcf5167db50>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7fcf515c0190>],\n",
              "       [<matplotlib.axes._subplots.AxesSubplot object at 0x7fcf515f8810>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7fcf515aed50>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7fcf515aed90>]],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 11
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x720 with 9 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plotting certain values against outcome\n",
        "sns.pairplot(dataset,x_vars=[\"Glucose\",\"BMI\",\"BloodPressure\"],y_vars=[\"Outcome\"])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 215
        },
        "id": "hUjGCGrrsqcj",
        "outputId": "0f878492-371c-487e-eb1d-d30654f1c037"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.PairGrid at 0x7fcf51414550>"
            ]
          },
          "metadata": {},
          "execution_count": 12
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 540x180 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Cleaning the data"
      ],
      "metadata": {
        "id": "jS7nwJZLtOA5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "q4TVGnRLs6tF",
        "outputId": "c03e84a4-4ce4-4233-f116-dc5d19d5b610"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Pregnancies                 0\n",
              "Glucose                     0\n",
              "BloodPressure               0\n",
              "SkinThickness               0\n",
              "Insulin                     0\n",
              "BMI                         0\n",
              "DiabetesPedigreeFunction    0\n",
              "Age                         0\n",
              "Outcome                     0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.isna().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LsxsmyX1tTUD",
        "outputId": "5e8c7bf2-0323-4dbb-bbde-8824994a0611"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Pregnancies                 0\n",
              "Glucose                     0\n",
              "BloodPressure               0\n",
              "SkinThickness               0\n",
              "Insulin                     0\n",
              "BMI                         0\n",
              "DiabetesPedigreeFunction    0\n",
              "Age                         0\n",
              "Outcome                     0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Predicting the data"
      ],
      "metadata": {
        "id": "B0nNQ18TtXSQ"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HJHDRehCtUq2"
      },
      "source": [
        "# independent variables(x): Glucose, BloodPressure  \n",
        "# dependent variables(y): Outcome\n",
        "x= dataset.iloc[:, [1,2]].values\n",
        "y= dataset.iloc[:, 8].values     "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# training  \n",
        "x_train, x_test, y_train, y_test= train_test_split(x, y, test_size= 0.25, random_state=0)  \n",
        "  \n",
        "# normalisation \n",
        "st_x= StandardScaler()                            \n",
        "x_train= st_x.fit_transform(x_train)    \n",
        "x_test= st_x.transform(x_test) "
      ],
      "metadata": {
        "id": "3SlR994Nt4Cs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g11flr1HtUrE",
        "outputId": "811d9be0-8889-4b8f-bfe4-782f3795bdcd"
      },
      "source": [
        "classifier= DecisionTreeClassifier(criterion='entropy', random_state=0)  \n",
        "classifier.fit(x_train, y_train)  "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DecisionTreeClassifier(criterion='entropy', random_state=0)"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tsJxJeF5tUrJ"
      },
      "source": [
        "y_pred= classifier.predict(x_test)  "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 261
        },
        "id": "A351oarMtUrL",
        "outputId": "cb4d3293-e236-4233-a444-6973cb65c0b8"
      },
      "source": [
        "# confusion matrix  \n",
        "cm= confusion_matrix(y_test, y_pred)  \n",
        "cm\n",
        "fig, ax = plot_confusion_matrix(conf_mat=cm, figsize=(3, 3), cmap=plt.cm.Greens)\n",
        "plt.xlabel('Predictions', fontsize=18)\n",
        "plt.ylabel('Actuals', fontsize=18)\n",
        "plt.title('Confusion Matrix', fontsize=18)\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 216x216 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hzeiH_HEtUrN",
        "outputId": "230b7a6d-51e1-4556-eacd-4fd38b114512"
      },
      "source": [
        "print('Accuracy on the training data is {:.2f}%'.format(classifier.score(x_train, y_train)*100))\n",
        "print('Accuracy on the test data is {:.2f}%'.format(classifier.score(x_test, y_test)*100))\n",
        "\n",
        "print(\"\\nr2 score:\",classifier.score(x_train,y_train))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy on the training data is 95.49%\n",
            "Accuracy on the test data is 72.40%\n",
            "\n",
            "r2 score: 0.9548611111111112\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('Mean Absolute Error:',metrics.mean_absolute_error(y_test,y_pred))\n",
        "print('Mean Squared Error:',metrics.mean_squared_error(y_test,y_pred))\n",
        "print('Root Mean Squared Error:',np.sqrt(metrics.mean_squared_error(y_test,y_pred)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cyNNfTdUxR_p",
        "outputId": "7d289745-9c60-4a67-ac6c-46d398c9bf95"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean Absolute Error: 0.2760416666666667\n",
            "Mean Squared Error: 0.2760416666666667\n",
            "Root Mean Squared Error: 0.5253966755382705\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 350
        },
        "id": "YwWEhPv-tUrP",
        "outputId": "0ce38eca-11f0-4726-b0a9-28f9ad3aba29"
      },
      "source": [
        "# visualising the trianing set result   \n",
        "x_set, y_set = x_train, y_train  \n",
        "x1, x2 = np.meshgrid(np.arange(start = x_set[:, 0].min() - 1, stop = x_set[:, 0].max() + 1, step  =0.01),  \n",
        "np.arange(start = x_set[:, 1].min() - 1, stop = x_set[:, 1].max() + 1, step = 0.01))  \n",
        "plt.contourf(x1, x2, classifier.predict(np.array([x1.ravel(), x2.ravel()]).T).reshape(x1.shape),  \n",
        "alpha = 0.75, cmap = ListedColormap(('purple','green' )))  \n",
        "plt.xlim(x1.min(), x1.max())  \n",
        "plt.ylim(x2.min(), x2.max())  \n",
        "for i, j in enumerate(np.unique(y_set)):  \n",
        "    plt.scatter(x_set[y_set == j, 0], x_set[y_set == j, 1],  \n",
        "    c = ListedColormap(('purple', 'green'))(i), label = j)  \n",
        "plt.title('Decision Tree Algorithm (Training set)')  \n",
        "plt.xlabel('Age')  \n",
        "plt.ylabel('Estimated Salary')  \n",
        "plt.legend()  \n",
        "plt.show()  "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
            "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 350
        },
        "id": "SU7lEsSXtUrR",
        "outputId": "55080ba9-027c-46dc-e05f-066aa5a10651"
      },
      "source": [
        "# Visualising the test set result   \n",
        "x_set, y_set = x_test, y_test  \n",
        "x1, x2 = np.meshgrid(np.arange(start = x_set[:, 0].min() - 1, stop = x_set[:, 0].max() + 1, step  =0.01),  \n",
        "np.arange(start = x_set[:, 1].min() - 1, stop = x_set[:, 1].max() + 1, step = 0.01))  \n",
        "plt.contourf(x1, x2, classifier.predict(np.array([x1.ravel(), x2.ravel()]).T).reshape(x1.shape),  \n",
        "alpha = 0.75, cmap = ListedColormap(('purple','green' )))  \n",
        "plt.xlim(x1.min(), x1.max())  \n",
        "plt.ylim(x2.min(), x2.max())  \n",
        "for i, j in enumerate(np.unique(y_set)):  \n",
        "    plt.scatter(x_set[y_set == j, 0], x_set[y_set == j, 1],  \n",
        "    c = ListedColormap(('purple', 'green'))(i), label = j)  \n",
        "plt.title('Decision Tree Algorithm(Test set)')  \n",
        "plt.xlabel('Age')  \n",
        "plt.ylabel('Estimated Salary')  \n",
        "plt.legend()  \n",
        "plt.show()  "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
            "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df=pd.DataFrame({'Actual':y_test.flatten(),'Predicted':y_pred.flatten()})\n",
        "df1=df.head(36)\n",
        "df1.plot(kind='bar',figsize=(12,5))\n",
        "plt.grid()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 322
        },
        "id": "gZx7IkGuxAXG",
        "outputId": "e5209bb7-6171-4c40-a992-32fde526fb5d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 864x360 with 1 Axes>"
            ],
            "image/png": "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LOhLkiSpNv6ynCRJkkrJICxJkqRSMghLkiSplAzCkiRJKiWDsCRJkkrJICxJkqRSGtCfWK7VqC+NL64WwMW9/+Te0KFDOfjgg9m4cSNvfvOb+da3vsUuu+xS12NOmzaN0047jSlTpjB9+nRO/cB03njAgT0u297ezvDhwznmmGNqeowJEyZwzz33sPPOO9fVoyRJUll5RrjCyJEjeeCBB3jwwQcZPnw4M2fO7Da/89flavX1r399qyEYsiB855131lVbkiRJtTMIb8Pxxx/PihUraG9v5/jjj+f0009n4sSJbNq0iU996lMceeSRTJo0iWuuuQaAlBLnnHMOb3rTmzjppJN47rnnNtdqbW3lod/dD8CvF/ycvz/l7RxzzDGceOKJPPbYY8ycOZOvfOUrHHroofzyl7/k+eef58wzz+TII4/kyCOP5Ne//jUAq1at4uSTT+Ytb3kL06dPJ/s9E0mSJNWqoS+NGEwbN27klltuoa2tDYD77ruPBx98kObmZq644gpGjx7NokWLWL9+Pcceeywnn3wy999/P8uXL2fp0qU8++yzTJw4kX/8x3/sVnf1qhf43Kc/xjdunM/xB/81GzZsYI899uCjH/0oTU1NnH/++QB84AMf4OMf/zjHHXccTzzxBO9617tYtmwZn/vc5zjuuOO48MILufnmm7n22msHfNtIkiTtCAzCFV555RUOPfRQIDsj/JGPfIQ777yTo446iubmZgBuv/12li5dyo033gjA2rVr+cMf/sDChQuZOnUqQ4cOZZ999uEd73jHFvUX37eII44+hvH7vQGAPfbYo8c+fv7zn7N06dLN4y+++CIdHR0sXLiQH/7whwCceuqp7L777sWtvCRJUokYhCt0XiNcadddd918O6XElVdeybve9a5uy8yfP7+wPl577TXuuusuRowYUVhNSZIk/YXXCNfhxBNP5Gtf+xobNmwA4OGHH+all17ihBNO4Prrr2fTpk0888wzLFiwYIv7Tjr8SO69+05WPvE4AKtXrwZg1KhRrFu3bvNyJ598MldeeeXm8c5wfsIJJ3DdddcBcMstt7BmzZr+WUlJkqQdXEOfEV73yZWMGjWqmFrr1lFMJfjQhz7EH//4Rw4//HBSSuy5557cdNNNvPe97+X2229n4sSJ7LfffrztbW/b4r57jBnLhV+4nE/MOIudIrHXXnvx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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}
